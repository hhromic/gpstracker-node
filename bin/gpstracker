#!/usr/bin/env node
/* jshint node:true */
'use strict';

/*!
 * A simple multi-client OsmAnd Live GPS Tracker server.
 *
 * Hugo Hromic - http://github.com/hhromic
 * Apache 2.0 license
 */

// required modules
var log4js = require('log4js');
var argparse = require('argparse');
var cjson = require('cjson');
var express = require('express');
var ws = require('ws');
var path = require('path');
var _package = require('../package');

// loggers
var loggers = {
 app: log4js.getLogger('app:' + process.pid),
 update: log4js.getLogger('update:' + process.pid),
 websocket: log4js.getLogger('websocket:' + process.pid),
};

// process command-line arguments
var argParser = argparse.ArgumentParser({
  version: _package.version,
  description: _package.description
});
argParser.addArgument(['-p', '--port'], {
  defaultValue: 2223, type: Number,
  help: 'app server port (default: 2223)'
});
argParser.addArgument(['-c', '--clients'], {
  defaultValue: 'clients.json',
  help: 'GPS clients data file in JSON format'
});
var options = argParser.parseArgs();

// load GPS clients data
try {
  var clients = cjson.load(options.clients);
}
catch (err) {
  loggers.app.error('clients load: %s', err.toString());
  process.exit(1);
}

// initialise Express application server
var app = express();
app.enable('trust proxy');
var appServer = app.listen(options.port, function onListening () {
  var host = appServer.address().address;
  var port = appServer.address().port;
  loggers.app.info('started app server on http://%s:%d', host, port);
});

// initialise WebSocket server
var lastUpd = {};
var wsServer = new ws.Server({server: appServer});
wsServer.broadcast = function broadcast (data) {
  wsServer.clients.forEach(function each (client) {
    client.send(data);
  });
};
wsServer.on('error', function onError (err) {
  loggers.websocket.error('server error: %s', err.toString());
});
wsServer.on('connection', function onConnection (wsClient) {
  var pingTimer = setInterval(function pinger () { wsClient.ping(); }, 20000);
  var ipAddress = wsClient.upgradeReq.headers['x-real-ip'] ||
    wsClient.upgradeReq.connection.remoteAddress;

  // initialise WebSocket client events
  wsClient.on('error', function onError (err) {
    loggers.websocket.error('error in client from %s: %s', ipAddress, err.toString());
  });
  wsClient.on('close', function onClose () {
    clearInterval(pingTimer);
    loggers.websocket.debug('client from %s disconnected', ipAddress);
  });

  // send last updates and log new client connection
  wsClient.send(JSON.stringify({lastUpd: lastUpd}));
  loggers.websocket.debug('client from %s connected', ipAddress);
});

// GPS client update resource
// speed = m/s, bearing = degrees from North to the East
app.get('/update', function onUpdate (request, response) {
  var cid = request.query.cid;
  if (cid !== undefined && cid in clients) {
      lastUpd[cid] = {client: clients[cid], data: request.query};
      wsServer.broadcast(JSON.stringify(lastUpd[cid]));
      response.send('ok\n');
      loggers.update.debug('%s sent %j', request.ip, request.query);
  } else {
      response.send('invalid\n');
      loggers.update.warn('invalid client \'%s\' from %s', cid, request.ip);
  }
});

// initialise static content serving
app.use(express.static(path.join(__dirname, '..', 'public')));
